import cdblib
jsonfile = 'example-03.json'
cdblib.create (jsonfile)
json = []

{a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u#}::Indices(position=independent).

\partial{#}::PartialDerivative.

\Gamma^{a}_{b c}::TableauSymmetry(shape={2}, indices={1,2});

;::Symbol;
            # see https://cadabra.science/qa/473/is-this-legal-syntax
            # this code works with and without this trick

# rules for the first two covariant derivs of V^a

deriv1 := V^{a}_{; b}      -> \partial_{b}{V^{a}}
                            + \Gamma^{a}_{c b} V^{c}.

deriv2 := V^{a}_{; b ; c}  -> \partial_{c}{V^{a}_{; b}}
                            + \Gamma^{a}_{d c} V^{d}_{; b}
                            - \Gamma^{d}_{b c} V^{a}_{; d}.

substitute (deriv2,deriv1)

Vabc := V^{a}_{; b ; c} - V^{a}_{; c ; b}.

substitute (Vabc,deriv2)

distribute     (Vabc)
product_rule   (Vabc)

sort_product   (Vabc)
rename_dummies (Vabc)
canonicalise   (Vabc)

sort_sum       (Vabc)
factor_out     (Vabc,$V^{a?}$)

json.append (Vabc)

# create rule for Riemann, export later (for use by lib/dgeom)

substitute (Vabc,$V^{a} -> -1$)
                                             # note use of -1 to get correct
                                             # signs when coupled with the rule
                                             # for Rabcd (next statement)

Rabcd := R^{a}_{d b c} -> @(Vabc).

foo   := R^{a}_{b c d}.
substitute (foo, Rabcd)

# update rule to use nice indices

Rabcd := R^{a}_{b c d} -> @(foo).

json.append (Rabcd)


{a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u#}::Indices(position=independent).

\partial{#}::PartialDerivative.

;::Symbol;
            # see https://cadabra.science/qa/473/is-this-legal-syntax
            # this code works with and without this trick

# rules for the first two covariant derivs of V^a

deriv1 := V^{a}_{; b}      -> \partial_{b}{V^{a}}
                            + \Gamma^{a}_{c b} V^{c}.

deriv2 := V^{a}_{; b ; c}  -> \partial_{c}{V^{a}_{; b}}
                            + \Gamma^{a}_{d c} V^{d}_{; b}
                            - \Gamma^{d}_{b c} V^{a}_{; d}.

substitute (deriv2,deriv1)

Vabc := V^{a}_{; b ; c} - V^{a}_{; c ; b}.

substitute (Vabc,deriv2)

distribute     (Vabc)
product_rule   (Vabc)

# ------------------------------------------------------
# trick to obtain a symmetric connection

G_{a b}::Symmetric.

substitute     (Vabc,$\Gamma^{a}_{b c} ->  G^{a} G_{b c}$)
sort_product   (Vabc)
rename_dummies (Vabc)
canonicalise   (Vabc)
substitute     (Vabc,$G^{a} G_{b c} -> \Gamma^{a}_{b c}$,repeat=True)
# ------------------------------------------------------

sort_product   (Vabc)
rename_dummies (Vabc)
canonicalise   (Vabc)

sort_sum       (Vabc)
factor_out     (Vabc,$V^{a?}$)

json.append (Vabc)

for i in range( len(json) ):
   cdblib.put ('json%03d'%(i),json[i],jsonfile)

