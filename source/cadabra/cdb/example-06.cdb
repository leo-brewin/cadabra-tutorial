import cdblib
checkpoint_file = 'tests/semantic/output/example-06.json'
cdblib.create (checkpoint_file)
checkpoint = []

{\theta, \varphi}::Coordinate.
{a,b,c,d,e,f,g,h#}::Indices(values={\theta, \varphi}, position=independent).

\partial{#}::PartialDerivative.

V  := { V_{\theta} = \varphi, V_{\varphi} = \sin(\theta) }.
dV := \partial_{b}{V_{a}} - \partial_{a}{V_{b}}.

evaluate (dV, V)

{\theta, \varphi}::Coordinate.
{a,b,c,d,e,f,g,h#}::Indices(values={\theta, \varphi}, position=independent).

\partial{#}::PartialDerivative.

Gamma := \Gamma^{a}_{b c} -> 1/2 g^{a d} (   \partial_{b}{g_{d c}}
                                           + \partial_{c}{g_{b d}}
                                           - \partial_{d}{g_{b c}}).

Rabcd := R^{a}_{b c d} ->   \partial_{c}{\Gamma^{a}_{b d}}
                          - \partial_{d}{\Gamma^{a}_{b c}}
                          + \Gamma^{e}_{b d} \Gamma^{a}_{c e}
                          - \Gamma^{e}_{b c} \Gamma^{a}_{d e}.

gab := { g_{\theta\theta}   = r**2,
         g_{\varphi\varphi} = r**2 \sin(\theta)**2 }.

iab := { g^{\theta\theta}   = 1/r**2,
         g^{\varphi\varphi} = 1/(r**2 \sin(\theta)**2) }.

substitute (Rabcd, Gamma)

evaluate   (Gamma, gab+iab, rhsonly=True)
evaluate   (Rabcd, gab+iab, rhsonly=True)

# convert from a rule to a simple expression
Riem := R^{a}_{b c d}.
substitute (Riem, Rabcd)

from cdb.core.component import *

RiemCompt = get_component (Riem, $\theta, \varphi, \theta, \varphi$)


{\theta, \varphi}::Coordinate.
{a,b,c,d,e,f,g,h#}::Indices(values={\theta, \varphi}, position=independent).

\partial{#}::PartialDerivative.

g^{a b}::InverseMetric.

Gamma := \Gamma^{a}_{b c} -> 1/2 g^{a d} (   \partial_{b}{g_{d c}}
                                           + \partial_{c}{g_{b d}}
                                           - \partial_{d}{g_{b c}}).

Rabcd := R^{a}_{b c d} ->   \partial_{c}{\Gamma^{a}_{b d}}
                          - \partial_{d}{\Gamma^{a}_{b c}}
                          + \Gamma^{e}_{b d} \Gamma^{a}_{c e}
                          - \Gamma^{e}_{b c} \Gamma^{a}_{d e}.

gab := { g_{\theta\theta}   = r**2,
         g_{\varphi\varphi} = r**2 \sin(\theta)**2 }.

complete   (gab, $g^{a b}$)

substitute (Rabcd, Gamma)

evaluate   (Gamma, gab, rhsonly=True)
evaluate   (Rabcd, gab, rhsonly=True)


{\theta, \varphi}::Coordinate.
{a,b,c,d,e,f,g,h#}::Indices(values={\theta, \varphi}, position=independent).

theta{#}::LaTeXForm{"\theta"}.
varphi{#}::LaTeXForm{"\varphi"}.

# usual definitions for the connection and Riemann tensor

Gamma := \Gamma^{a}_{b c} -> 1/2 g^{a d} (   \partial_{b}{g_{d c}}
                                           + \partial_{c}{g_{b d}}
                                           - \partial_{d}{g_{b c}}).

Rabcd := R^{a}_{b c d} ->   \partial_{c}{\Gamma^{a}_{b d}}
                          - \partial_{d}{\Gamma^{a}_{b c}}
                          + \Gamma^{e}_{b d} \Gamma^{a}_{c e}
                          - \Gamma^{e}_{b c} \Gamma^{a}_{d e}.

gab := { g_{\theta \theta}   = r**2,
         g_{\varphi \varphi} = r**2 \sin(\theta)**2 }.

iab := { g^{\theta\theta}   = 1/r**2,
         g^{\varphi\varphi} = 1/(r**2 \sin(\theta)**2) }.

substitute (Rabcd, Gamma)
evaluate   (Rabcd, gab+iab, rhsonly=True)

# above code just to compute Rabcd
# following code is all that is needed for the scalar projection method

# define the basis for vectors and dual vectors

basis := {theta^{\theta} = 1, varphi^{\varphi} = 1}.
dual  := {theta_{\theta} = 1, varphi_{\varphi} = 1}.

# obtain components by contracting with basis

compt := R^{a}_{b c d} theta_{a} varphi^{b} theta^{c} varphi^{d}.
substitute (compt,Rabcd)

evaluate (compt,basis+dual)

compt_sympy = compt._sympy_()

print ('type compt   = ' + str(type(compt)))
print ('type gphiphi = ' + str(type(compt_sympy)))
print ('     compt   = ' + str(compt))
print ('     gphiphi = ' + str(compt_sympy))

checkpoint.append (compt)

{\theta, \varphi}::Coordinate.
{a,b,c,d,e,f,g,h#}::Indices(values={\theta, \varphi}, position=independent).

theta{#}::LaTeXForm{"\theta"}.
varphi{#}::LaTeXForm{"\varphi"}.

gab := { g_{\theta \theta}   = r**2,
         g_{\varphi \varphi} = r**2 \sin(\theta)**2 }.

metric := g_{a b}.

evaluate (metric,gab)

indcs = metric[2][1][0]
compt = metric[2][1][1]

print ('metric = ' + str(metric.input_form())+'\n')

print ('metric[0] = ' + str(metric[0]))
print ('metric[1] = ' + str(metric[1]))
print ('metric[2] = ' + str(metric[2])+'\n')

print ('metric[2][1] = '+ str(metric[2][1]))
print ('metric[2][1][0] = '+ str(metric[2][1][0]))
print ('metric[2][1][1] = '+ str(metric[2][1][1]))

checkpoint.append (indcs)
checkpoint.append (compt)

for i in range( len(checkpoint) ):
   cdblib.put ('check{:03d}'.format(i),checkpoint[i],checkpoint_file)

