import cdblib
jsonfile = 'example-06.json'
cdblib.create (jsonfile)
json = []

{\theta, \varphi}::Coordinate.
{a,b,c,d,e,f,g,h#}::Indices(values={\theta, \varphi}, position=independent).

\partial{#}::PartialDerivative.

V  := { V_{\theta} = \varphi, V_{\varphi} = \sin(\theta) }.
dV := \partial_{b}{V_{a}} - \partial_{a}{V_{b}}.

evaluate (dV, V)

{\theta, \varphi}::Coordinate.
{a,b,c,d,e,f,g,h#}::Indices(values={\theta, \varphi}, position=independent).

\partial{#}::PartialDerivative.

Gamma := \Gamma^{a}_{f g} -> 1/2 g^{a b} (   \partial_{g}{g_{b f}}
                                           + \partial_{f}{g_{b g}}
                                           - \partial_{b}{g_{f g}} ).

Rabcd := R^{d}_{e f g} ->   \partial_{f}{\Gamma^{d}_{e g}}
                          - \partial_{g}{\Gamma^{d}_{e f}}
                          + \Gamma^{d}_{b f} \Gamma^{b}_{e g}
                          - \Gamma^{d}_{b g} \Gamma^{b}_{e f}.

Rab := R_{a b} -> R^{c}_{a c b}.

gab := { g_{\theta\theta}   = r**2,
         g_{\varphi\varphi} = r**2 \sin(\theta)**2 }.

iab := { g^{\theta\theta}   = 1/r**2,
         g^{\varphi\varphi} = 1/(r**2 \sin(\theta)**2) }.

substitute (Rabcd, Gamma)
substitute (Rab, Rabcd)

evaluate   (Gamma, gab+iab, rhsonly=True)
evaluate   (Rabcd, gab+iab, rhsonly=True)
evaluate   (Rab,   gab+iab, rhsonly=True)

Riem := R^{d}_{e f g}.
substitute (Riem, Rabcd)
evaluate   (Riem, gab+iab)

expr := R_{a b}.
substitute (expr, Rab)
evaluate   (expr, gab+iab)

print ('Rab = ' + str(Rab.input_form())+'\n')

print ('Rab[0] = ' + str(Rab[0]))
print ('Rab[1] = ' + str(Rab[1])+'\n')

print ('Rab[1][0] = ' + str(Rab[1][0]))
print ('Rab[1][1] = ' + str(Rab[1][1]))
print ('Rab[1][2] = ' + str(Rab[1][2])+'\n')

print ('Rab[1][2][0] = ' + str(Rab[1][2][0]))
print ('Rab[1][2][0][0] = ' + str(Rab[1][2][0][0]))
print ('Rab[1][2][0][1] = ' + str(Rab[1][2][0][1]))

{\theta, \varphi}::Coordinate.
{a,b,c,d,e,f,g,h#}::Indices(values={\theta, \varphi}, position=independent).

\partial{#}::PartialDerivative.

g^{a b}::InverseMetric.

Gamma := \Gamma^{a}_{f g} -> 1/2 g^{a b} (   \partial_{g}{g_{b f}}
                                           + \partial_{f}{g_{b g}}
                                           - \partial_{b}{g_{f g}} ).

Rabcd := R^{d}_{e f g} ->   \partial_{f}{\Gamma^{d}_{e g}}
                          - \partial_{g}{\Gamma^{d}_{e f}}
                          + \Gamma^{d}_{b f} \Gamma^{b}_{e g}
                          - \Gamma^{d}_{b g} \Gamma^{b}_{e f}.

Rab := R_{a b} -> R^{c}_{a c b}.

gab := { g_{\theta\theta}   = r**2,
         g_{\varphi\varphi} = r**2 \sin(\theta)**2 }.

complete   (gab, $g^{a b}$)

substitute (Rabcd, Gamma)
substitute (Rab, Rabcd)

evaluate   (Gamma, gab, rhsonly=True)
evaluate   (Rabcd, gab, rhsonly=True)
evaluate   (Rab,   gab, rhsonly=True)

Riem := R^{d}_{e f g}.
substitute (Riem, Rabcd)
evaluate   (Riem, gab)


{\theta, \varphi}::Coordinate.
{a,b,c,d,e,f,g,h#}::Indices(values={\theta, \varphi}, position=independent).

theta{#}::LaTeXForm{"\theta"}.
varphi{#}::LaTeXForm{"\varphi"}.

gab := { g_{\theta \theta}   = r**2,
         g_{\varphi \varphi} = r**2 \sin(\theta)**2 }.

# obtain components by contracting with basis vectors

basis := {theta^{\theta} = 1, varphi^{\varphi} = 1}.

compt := g_{a b} varphi^{a} varphi^{b}.

evaluate (compt,gab+basis)

gphiphi = compt._sympy_()

print ('type compt   = ' + str(type(compt)))
print ('type gphiphi = ' + str(type(gphiphi)))
print ('     compt   = ' + str(compt))
print ('     gphiphi = ' + str(gphiphi))

json.append (compt)

{\theta, \varphi}::Coordinate.
{a,b,c,d,e,f,g,h#}::Indices(values={\theta, \varphi}, position=independent).

theta{#}::LaTeXForm{"\theta"}.
varphi{#}::LaTeXForm{"\varphi"}.

gab := { g_{\theta \theta}   = r**2,
         g_{\varphi \varphi} = r**2 \sin(\theta)**2 }.

metric := g_{a b}.

evaluate (metric,gab)

indcs = metric[2][1][0]
compt = metric[2][1][1]

print ('metric = ' + str(metric.input_form())+'\n')

print ('metric[0] = ' + str(metric[0]))
print ('metric[1] = ' + str(metric[1]))
print ('metric[2] = ' + str(metric[2])+'\n')

print ('metric[2][1] = '+ str(metric[2][1]))
print ('metric[2][1][0] = '+ str(metric[2][1][0]))
print ('metric[2][1][1] = '+ str(metric[2][1][1]))

json.append (indcs)
json.append (compt)

for i in range( len(json) ):
   cdblib.put ('json%03d'%(i),json[i],jsonfile)

