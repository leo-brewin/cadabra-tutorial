import cdblib
checkpoint_file = 'tests/semantic/output/example-08.json'
cdblib.create (checkpoint_file)
checkpoint = []

{a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u#}::Indices(position=independent).

def create (file_name):
    import json, io, os, errno

    try:
        os.remove(file_name)
        with open(file_name, 'w'): pass
    except OSError as e:
        if e.errno == errno.ENOENT:
           with open(file_name, 'w'): pass
        else:
            raise

    # Create and save an empty dict
    data_out = {}
    with io.open(os.getcwd() + '/' + file_name, 'w', encoding='utf-8') as out_file:
        out_file.write(json.dumps(data_out,
                                  indent=2,
                                  sort_keys=True,
                                  separators=(',', ': '),
                                  ensure_ascii=False)+'\n')

def put (key_name,object,file_name):
    import json, io, os

    # Read the current dict
    with io.open(os.getcwd() + '/' + file_name) as inp_file:
        data_out = json.load(inp_file)

    # Add a new entry to the dict
    data_out[key_name] = object.input_form()

    # Save the updated dict
    with io.open(os.getcwd() + '/' + file_name, 'w', encoding='utf-8') as out_file:
        out_file.write(json.dumps(data_out,
                                  indent=2,
                                  sort_keys=True,
                                  separators=(',', ': '),
                                  ensure_ascii=False)+'\n')

def get (key_name,file_name):
    import json, io, os

    # Read the current dict
    with io.open(os.getcwd() + '/' + file_name) as inp_file:
        data_inp = json.load(inp_file)

    # Return one entry from the dict
    return Ex (data_inp[key_name])

lib_name = 'example-08.json'

create (lib_name)

\nabla{#}::Derivative.

gab := g_{a b} - 1/3 x^{c} x^{d} R_{a c b d}
               - 1/6 x^{c} x^{d} x^{e} \nabla_{c}{R_{a d b e}}.

iab := g^{a b} + 1/3 x^{c} x^{d} g^{a e} g^{b f} R_{c e d f}
               + 1/6 x^{c} x^{d} x^{e} g^{a f} g^{b g} \nabla_{c}{R_{d f e g}}.

put ('g_ab',gab,lib_name)
put ('g^ab',iab,lib_name)

foo = get ('g_ab',lib_name)
bah = get ('g^ab',lib_name)

tmp := @(gab) - @(foo).
tmp := @(iab) - @(bah).

for i in range( len(checkpoint) ):
   cdblib.put ('check{:03d}'.format(i),checkpoint[i],checkpoint_file)

