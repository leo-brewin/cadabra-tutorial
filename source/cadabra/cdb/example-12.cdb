import cdblib
jsonfile = 'example-12.json'
cdblib.create (jsonfile)
json = []

{a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,u,v#}::Indices("latin",position=independent).
{\mu,\nu,\rho,\sigma,\tau,\lambda,\xi#}::Indices("greek",position=independent).

\nabla{#}::Derivative.

g_{a b}::Metric.
g^{a b}::InverseMetric.
g^{a b}::Weight(label=gnum,value=1).

\delta{#}::KroneckerDelta.

R_{a b c d}::RiemannTensor.
R_{a b c d}::Depends(\nabla{#}).

x^{a}::Weight(label=xnum,value=1).

def add_tags (obj,tag):

   n = 0
   ans = Ex('0')

   for i in obj.top().terms():
      foo = obj[i]
      bah = Ex(tag+'_{'+str(n)+'}')
      ans := @(ans) + @(bah) @(foo).
      n = n + 1

   return ans

def clear_tags (obj,tag):

   ans := @(obj).
   foo  = Ex(tag+'_{a?} -> 1')
   substitute (ans,foo)

   return ans

def get_xterm (obj,n):

    foo := @(obj).
    bah  = Ex("xnum = " + str(n))
    distribute  (foo)
    keep_weight (foo, bah)

    return foo

def get_gterm (obj,n):

    foo := @(obj).
    bah  = Ex("gnum = " + str(n))
    distribute  (foo)
    keep_weight (foo, bah)

    return foo

def product_sort (obj):
    substitute (obj,$ g^{a b}                   -> A001^{a b}                $)
    substitute (obj,$ x^{a}                     -> A002^{a}                  $)
    substitute (obj,$ z^{a}                     -> A003^{a}                  $)
    substitute (obj,$ R_{a b c d}               -> A004_{a b c d}            $)
    substitute (obj,$ \nabla_{e}{R_{a b c d}}   -> A005_{a b c d e}          $)
    substitute (obj,$ \nabla_{e f}{R_{a b c d}} -> A006_{a b c d e f}        $)
    sort_sum       (obj)
    sort_product   (obj)
    rename_dummies (obj)
    substitute (obj,$ A001^{a b}                -> g^{a b}                   $)
    substitute (obj,$ A002^{a}                  -> x^{a}                     $)
    substitute (obj,$ A003^{a}                  -> z^{a}                     $)
    substitute (obj,$ A004_{a b c d}            -> R_{a b c d}               $)
    substitute (obj,$ A005_{a b c d e}          -> \nabla_{e}{R_{a b c d}}   $)
    substitute (obj,$ A006_{a b c d e f}        -> \nabla_{e f}{R_{a b c d}} $)

def reformat (obj,scaleA,scaleB):

   foo  = Ex(str(scaleA))
   moo  = Ex(str(scaleB))
   bah := @(foo) @(obj) / @(moo).

   distribute     (bah)
   product_sort   (bah)
   rename_dummies (bah)
   canonicalise   (bah)
   factor_out     (bah,$g^{c? d?}$)
   factor_out     (bah,$x^{a?},z^{b?}$)
   ans := @(moo) @(bah) / @(foo).

   return ans

# ==========================================================================
# LCB

import cdblib
Gamma  = cdblib.get ('Gamma','example-11.json')

Gamma := z^{b} z^{c} @(Gamma).

# lower index ^{a} to _{v}

Gamma := g_{v a} @(Gamma).

distribute (Gamma)
substitute (Gamma, $g_{a d} g^{d b} -> \delta_{a}^{b}$)
eliminate_kronecker (Gamma)

# change free index _{v} to _{a}

foo := tmp_{v} -> @(Gamma).
bah := tmp_{a}.
substitute (bah, foo)

Gamma := @(bah).

product_sort (Gamma)

json.append (Gamma)

gam1  = get_xterm (Gamma,1)
gam2  = get_xterm (Gamma,2)
gam3  = get_xterm (Gamma,3)

gam30 = get_gterm (gam3,0)
gam31 = get_gterm (gam3,1)

gam1  = reformat (gam1, 3,1)
gam2  = reformat (gam2,12,1)

gam30 = reformat (gam30,40,1)
gam31 = reformat (gam31,45,2)

gam3 := @(gam30) + @(gam31).

Gamma := @(gam1) + @(gam2) + @(gam3).

json.append (Gamma)


# ==========================================================================
# Calzetta
# note: \nabla_{a b} defined as \nabla_{a}\nabla_{b}

GammaBar := z^{\nu} z^{\rho} (
              (2/3) R^{\mu}_{\nu\rho\sigma} x^{\sigma}
            + (1/12) (5 \nabla_{\lambda}{R^{\mu}_{\nu\rho\sigma}}
                      + \nabla_{\rho}{R^{\mu}_{\sigma\nu\lambda}}) x^{\sigma} x^{\lambda}
            + (1/6) (  (9/10) \nabla_{\tau\lambda}{R^{\mu}_{\rho\nu\sigma}}
                     + (3/20) (  \nabla_{\tau\rho}{R^{\mu}_{\sigma\nu\lambda}}
                               + \nabla_{\rho\tau}{R^{\mu}_{\sigma\nu\lambda}} )
                     + (1/60) (  21 R^{\mu}_{\lambda\xi\rho} R^{\xi}_{\sigma\nu\tau}
                               + 48 R^{\mu}_{\xi\rho\lambda} R^{\xi}_{\sigma\nu\tau}
                               - 37 R^{\mu}_{\sigma\xi\lambda} R^{\xi}_{\nu\rho\tau} ) ) x^{\sigma} x^{\lambda} x^{\tau} ).
                                                               # cdb(ex-12.400,GammaBar)

# convert from Greek to Latin indices

distribute (GammaBar)
rename_dummies (GammaBar,"greek","latin")

# lower the \mu index

GammaBar := \delta_{a \mu} @(GammaBar).
distribute (GammaBar)
eliminate_kronecker (GammaBar)

# sort products

product_sort (GammaBar)

json.append (GammaBar)

# Replace R with - R (Calzetta uses the non-MTW convention for Riemann)

substitute (GammaBar, $R_{a b c d} -> - R_{a b c d}$)
substitute (GammaBar, $R^{a}_{b c d} -> - R^{a}_{b c d}$)

substitute (GammaBar, $R^{a}_{b c d} -> g^{a e} R_{e b c d}$)

cal1 = get_xterm (GammaBar,1)
cal2 = get_xterm (GammaBar,2)
cal3 = get_xterm (GammaBar,3)

cal1 = reformat (cal1,3,1)
cal2 = reformat (cal2,12,1)
# cal3 = reformat (cal3,360,1)                                   # cdb(ex-12.602,cal3)

cal30 = get_gterm (cal3,0)
cal31 = get_gterm (cal3,1)

cal1  = reformat (cal1, 3,1)
cal2  = reformat (cal2,12,1)

cal30 = reformat (cal30,40,1)
cal31 = reformat (cal31,360,1)

cal3 := @(cal30) + @(cal31).

GammaBar := @(cal1) + @(cal2) + @(cal3).

json.append (GammaBar)


def reformat_diff (obj):

    distribute (obj)

    obj1  = get_xterm (obj,1)
    obj2  = get_xterm (obj,2)
    obj3  = get_xterm (obj,3)

    obj30 = get_gterm (obj3,0)
    obj31 = get_gterm (obj3,1)

    obj1  = reformat (obj1, 3,1)
    obj2  = reformat (obj2,12,1)

    obj30 = reformat (obj30,40,1)
    obj31 = reformat (obj31,360,1)

    obj3 := @(obj30) + @(obj31).

    ans := @(obj1) + @(obj2) + @(obj3).

    return ans

# We could use reformat_diff here but instead we'll do it one step at a time so that
# we can see exactly what's going on. Later on we will use reformat_diff to do the job.

diff := @(Gamma) - @(GammaBar).
distribute (diff)

diff1  = get_xterm (diff,1)
diff2  = get_xterm (diff,2)
diff3  = get_xterm (diff,3)

diff30 = get_gterm (diff3,0)
diff31 = get_gterm (diff3,1)

diff1  = reformat (diff1, 3,1)
diff2  = reformat (diff2,12,1)

diff30 = reformat (diff30,40,1)
diff31 = reformat (diff31,360,1)

diff3 := @(diff30) + @(diff31).

diff := @(diff1) + @(diff2) + @(diff3).


diff2  = get_xterm (diff,2)
diff2 := 12 @(diff2).
distribute (diff2)

diff2 = add_tags (diff2,'\\mu')

# swap indices on middle term, then apply 2nd Bianchi identity

zoom       (diff2, $\mu_{1} Q??$)
substitute (diff2, $\nabla_{b}{R_{a d c e}} -> - \nabla_{b}{R_{d a c e}}$)
unzoom     (diff2)

substitute (diff2, $\mu_{1} -> \mu_{0}, \mu_{2} -> \mu_{0}$)
substitute (diff2, $\mu_{0} -> 0$)

diff2 = clear_tags (diff2,'\\mu')

diff2 := @(diff2) / 12 .

diff := @(diff1) + @(diff2) + @(diff3).

diff  = reformat_diff (diff)

diff3  = get_xterm (diff,3)
diff3 := 360 @(diff3).
distribute (diff3)

# commutation rule for covariant derivs on Rabcd, see exrecise 3.6
# note: \nabla_{a b} defined as \nabla_{a}\nabla_{b}
CommuteNablaRiemann := \nabla_{f e}(R_{a b c d}) -> \nabla_{e f}(R_{a b c d})
                                                  + g^{u v} R_{u a e f} R_{v b c d}
                                                  + g^{u v} R_{u b e f} R_{a v c d}
                                                  + g^{u v} R_{u c e f} R_{a b v d}
                                                  + g^{u v} R_{u d e f} R_{a b c v}.

diff3 = add_tags (diff3,'\\mu')

# commute derivs on Rabcd so that each double deriv is of the form \nabla_{b*}

substitute (diff3, $\mu_{3} -> \mu_{1}$)

zoom       (diff3, $\mu_{1} Q??$)
substitute (diff3, CommuteNablaRiemann)
unzoom     (diff3)

diff3 = clear_tags (diff3,'\\mu')
diff3 := @(diff3) / 360 .

distribute   (diff3)
canonicalise (diff3)

diff := @(diff1) + @(diff2) + @(diff3).

diff  = reformat_diff (diff)

diff3  = get_xterm (diff,3)
diff3 := 360 @(diff3).
distribute (diff3)

diff3 = add_tags (diff3,'\\mu')

# swap indices on middle second deriv term, then apply 2nd Bianchi identity

zoom       (diff3, $\mu_{1} Q??$)
substitute (diff3, $\nabla_{b c}{R_{a e d f}} -> - \nabla_{b c}{R_{e a d f}}$)
unzoom     (diff3)

substitute (diff3, $\mu_{1} -> \mu_{0}, \mu_{2} -> \mu_{0}$)
substitute (diff3, $\mu_{0} -> 0$)

diff3 = clear_tags (diff3,'\\mu')
diff3 := @(diff3) / 360 .

distribute   (diff3)
canonicalise (diff3)

diff := @(diff1) + @(diff2) + @(diff3).

diff  = reformat_diff (diff)

diff3  = get_xterm (diff,3)
diff3 := 360 @(diff3).
distribute (diff3)

diff3 = add_tags (diff3,'\\mu')

# swap indices on middle term, then apply 1st Bianchi identity

zoom       (diff3, $\mu_{1} Q??$)
substitute (diff3, $R_{a d b g} R_{c e f h} -> - R_{a d g b} R_{c e f h}$)
unzoom     (diff3)

substitute (diff3, $\mu_{1} -> \mu_{0}, \mu_{2} -> \mu_{0}$)
substitute (diff3, $\mu_{0} -> 0$)

diff3 = clear_tags (diff3,'\\mu')

diff := @(diff1) + @(diff2) + @(diff3).

diff  = reformat_diff (diff)

for i in range( len(json) ):
   cdblib.put ('json%03d'%(i),json[i],jsonfile)

